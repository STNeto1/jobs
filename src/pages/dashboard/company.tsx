import {
  Button,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Input,
  Select,
  Skeleton
} from '@chakra-ui/react'
import { zodResolver } from '@hookform/resolvers/zod'
import { CompanySize } from '@prisma/client'
import type { GetServerSidePropsContext, NextPage } from 'next'
import { unstable_getServerSession } from 'next-auth'
import Head from 'next/head'
import { useForm } from 'react-hook-form'
import type { z } from 'zod'
import { upsertCompany } from '../../server/trpc/inputs/company'
import DashboardTemplate from '../../templates/DashboardTemplate'
import { trpc } from '../../utils/trpc'
import { authOptions } from '../api/auth/[...nextauth]'

export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  )

  if (!session) {
    return {
      redirect: {
        destination: '/auth/sign-in',
        permanent: false
      }
    }
  }

  return {
    props: {}
  }
}

type FormProps = z.infer<typeof upsertCompany>

const CompanyIndexPage: NextPage = () => {
  const utils = trpc.useContext()

  const {
    handleSubmit,
    register,
    formState: { errors },
    reset,
    setValue
  } = useForm<FormProps>({
    resolver: zodResolver(upsertCompany)
  })

  // TODO add logo
  const { data, isLoading } = trpc.company.userCompany.useQuery(undefined, {
    onSuccess: (data) => {
      if (!data) {
        return
      }

      setValue('name', data.name)
      setValue('size', data.size)
      setValue('location', data?.location)
    }
  })
  const { mutate, isLoading: isUpserting } =
    trpc.company.upsertCompany.useMutation({})

  const onSubmit = handleSubmit((data) =>
    mutate(data, {
      onSuccess: async () => {
        await utils.company.userCompany.invalidate()
        reset()
      }
    })
  )

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <DashboardTemplate>
          <Skeleton
            height={'xl'}
            width={'full'}
            color={'white'}
            isLoaded={!isLoading}
          >
            <form onSubmit={onSubmit}>
              <Flex
                align={'flex-end'}
                direction={{ base: 'column', lg: 'row' }}
                gap={4}
              >
                <FormControl>
                  <FormLabel htmlFor="name">Name</FormLabel>
                  <Input id="name" placeholder="name" {...register('name')} />
                  <FormErrorMessage>
                    {errors.name && errors.name.message}
                  </FormErrorMessage>
                </FormControl>
                <FormControl>
                  <FormLabel htmlFor="location">Location</FormLabel>
                  <Input
                    id="location"
                    placeholder="location"
                    {...register('location')}
                  />
                  <FormErrorMessage>
                    {errors.location && errors.location.message}
                  </FormErrorMessage>
                </FormControl>
                <FormControl>
                  <FormLabel htmlFor="size">Company Size</FormLabel>
                  <Select placeholder="Company Size" {...register('size')}>
                    {Object.keys(CompanySize).map((size) => (
                      <option key={size} value={size}>
                        {size}
                      </option>
                    ))}
                  </Select>
                  <FormErrorMessage>
                    {errors.size && errors.size.message}
                  </FormErrorMessage>
                </FormControl>

                <Button
                  colorScheme="teal"
                  isLoading={isUpserting}
                  type="submit"
                  w={'60'}
                >
                  {!!data ? 'Update' : 'Create'}
                </Button>
              </Flex>
            </form>
          </Skeleton>
        </DashboardTemplate>
      </main>
    </>
  )
}

export default CompanyIndexPage
