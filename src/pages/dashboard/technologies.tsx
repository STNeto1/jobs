import {
  Button,
  Center,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Input,
  Skeleton,
  Table,
  TableContainer,
  Tbody,
  Td,
  Th,
  Thead,
  Tr
} from '@chakra-ui/react'
import { zodResolver } from '@hookform/resolvers/zod'
import type { GetServerSidePropsContext, NextPage } from 'next'
import { unstable_getServerSession } from 'next-auth'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import { useForm } from 'react-hook-form'
import type { z } from 'zod'
import Pagination from '../../components/Pagination'

import { upsertTechnology } from '../../server/trpc/inputs/technology'
import DashboardTemplate from '../../templates/DashboardTemplate'
import { trpc } from '../../utils/trpc'
import { authOptions } from '../api/auth/[...nextauth]'

export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  )

  if (!session) {
    return {
      redirect: {
        destination: '/auth/sign-in',
        permanent: false
      }
    }
  }

  return {
    props: {}
  }
}

type FormProps = z.infer<typeof upsertTechnology>

const TechnologiesIndexPage: NextPage = () => {
  const [page, setPage] = useState<number>(-1)
  const { isReady, query, push } = useRouter()

  const utils = trpc.useContext()
  const { data } = trpc.technology.getAll.useQuery(
    {
      limit: 10,
      page
    },
    {
      enabled: page !== -1
    }
  )

  const {
    handleSubmit,
    register,
    formState: { errors },
    reset
  } = useForm<FormProps>({
    resolver: zodResolver(upsertTechnology)
  })

  const { mutate, isLoading: isCreating } = trpc.technology.store.useMutation({
    onSuccess: async () => {
      await utils.technology.getAll.invalidate()
      reset()
    }
  })

  const onSubmit = handleSubmit((data) => mutate(data))

  useEffect(() => {
    if (!isReady) {
      return
    }

    const _page = Number(query.page)
    if (!isNaN(_page)) {
      setPage(_page)
      return
    }

    setPage(1)
  }, [isReady, query])

  const handlePagination = async (page: number) => {
    await push(`/dashboard/technologies?page=${page}`)
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <DashboardTemplate>
          <Skeleton
            height={'xl'}
            width={'full'}
            color={'white'}
            isLoaded={!!data}
          >
            <form onSubmit={onSubmit}>
              <Flex align={'flex-end'} gap={2}>
                <FormControl>
                  <FormLabel htmlFor="title">Title</FormLabel>
                  <Input
                    id="title"
                    placeholder="title"
                    {...register('title')}
                  />
                  <FormErrorMessage>
                    {errors.title && errors.title.message}
                  </FormErrorMessage>
                </FormControl>
                <Button
                  mt={4}
                  colorScheme="teal"
                  isLoading={isCreating}
                  type="submit"
                >
                  Create
                </Button>
              </Flex>
            </form>

            <TableContainer pt={4}>
              <Table variant="striped">
                <Thead>
                  <Tr>
                    <Th>ID</Th>
                    <Th>Title</Th>
                    <Th>Created</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {data?.data.map((technology) => (
                    <Tr key={technology.id}>
                      <Td width={'20%'}>{technology.id}</Td>
                      <Td>{technology.title}</Td>
                      <Td width={'15%'}>
                        {technology.createdAt.toLocaleString()}
                      </Td>
                    </Tr>
                  ))}
                </Tbody>
              </Table>
            </TableContainer>

            <Center pt={4}>
              <Pagination
                page={page}
                count={data?.pages ?? 0}
                onClick={(newPage) => handlePagination(newPage)}
              />
            </Center>
          </Skeleton>
        </DashboardTemplate>
      </main>
    </>
  )
}

export default TechnologiesIndexPage
