// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  company       Company?
  UserSkill     UserSkill[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Technology {
  id        String      @id @default(cuid())
  title     String
  slug      String      @unique
  createdAt DateTime    @default(now())
  UserSkill UserSkill[]
  jobs      Job[]
}

model Company {
  id        String      @id @default(cuid())
  name      String
  size      CompanySize
  location  String
  about     String      @db.Text
  createdAt DateTime    @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs   Job[]
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
}

model UserSkill {
  id        String   @id @default(cuid())
  years     Int
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  skillId String
  skill   Technology @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

model Job {
  id    String @id @default(cuid())
  title String

  company      Company      @relation(fields: [companyId], references: [id])
  companyId    String
  location     String
  salary       Float
  remote       Boolean
  description  String       @db.Text
  requirements String       @db.Text
  level        JobLevel
  technologies Technology[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JobLevel {
  JUNIOR
  MID
  SENIOR
}
